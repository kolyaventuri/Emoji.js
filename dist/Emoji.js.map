{"version":3,"sources":["../src/Emoji.js"],"names":["bind","document","readyState","goReplace","addEventListener","emojis","querySelectorAll","window","emojiClass","join","fallback","forEach","emoji","original","innerHTML","converted","emojione","toImage","outerHTML","parser","DOMParser","parseFromString","ex","htmlData","images","_emojified","_image","rexp","RegExp","title","object","createElement","style","backgroundColor","backgroundImage","src","backgroundSize","display","setAttribute","getAttribute","replace","el","rel","type","href","head","appendChild","s","async","onreadystatechange","onload","test","querySelector"],"mappings":";;AAYA;;;;;;AAEA,IAAMA,OAAO,SAAPA,IAAO,GAAM;AACjB,MAAGC,SAASC,UAAT,KAAwB,UAA3B,EAAuC;AACrCC;AACD,GAFD,MAEO;AACLF,aAASG,gBAAT,CAA0B,kBAA1B,EAA8CD,SAA9C;AACD;AACF,CAND,C,CAdA;;;;;;;;;;;;AAsBA,IAAMA,YAAY,SAAZA,SAAY,GAAM;AACtB,MAAIE,SAASJ,SAASK,gBAAT,CAA0BC,OAAOC,UAAP,GAAoBD,OAAOC,UAAP,CAAkBC,IAAlB,CAAuB,GAAvB,CAApB,GAAkD,QAA5E,CAAb;AACA,MAAIC,WAAW,SAAXA,QAAW,GAAM;AACnB,qBAAEC,OAAF,CAAUN,MAAV,EAAkB,UAACO,KAAD,EAAW;AAC3B,UAAIC,WAAWD,MAAME,SAArB;AACA,UAAIC,YAAYC,SAASC,OAAT,CAAiBJ,QAAjB,CAAhB;AACAD,YAAMM,SAAN,GAAkBH,SAAlB;AACD,KAJD;AAKD,GAND;AAOA,MAAG,eAAeR,MAAlB,EAA0B;AACxB,QAAIY,SAAS,IAAIC,SAAJ,EAAb;AACA,QAAI;AACF,UAAK,IAAIA,SAAJ,EAAD,CAAkBC,eAAlB,CAAkC,EAAlC,EAAsC,WAAtC,CAAJ,EAAwD,CAEvD;AACF,KAJD,CAIE,OAAOC,EAAP,EAAW;AAACZ;AAAY;;AAE1B,qBAAEC,OAAF,CAAUN,MAAV,EAAkB,UAACO,KAAD,EAAW;AAC3B,UAAIC,WAAWD,MAAME,SAArB;AACA,UAAIC,YAAYC,SAASC,OAAT,CAAiBJ,QAAjB,CAAhB;AACA,UAAIU,WAAWJ,OAAOE,eAAP,CAAuBN,SAAvB,EAAkC,WAAlC,CAAf;AACA,UAAIS,SAASD,SAASjB,gBAAT,CAA0B,cAA1B,CAAb;AACA,UAAImB,aAAab,MAAMM,SAAvB;;AAEA,uBAAEP,OAAF,CAAUa,MAAV,EAAkB,UAACE,MAAD,EAAY;AAC5B,YAAIC,OAAO,IAAIC,MAAJ,CAAWF,OAAOG,KAAlB,EAAyB,GAAzB,CAAX;AACA,YAAIC,SAAS7B,SAAS8B,aAAT,CAAuB,GAAvB,CAAb;AACAD,eAAOE,KAAP,CAAaC,eAAb,GAA+B,eAA/B;AACAH,eAAOE,KAAP,CAAaE,eAAb,GAA+B,SAASR,OAAOS,GAAhB,GAAsB,GAArD;AACAL,eAAOE,KAAP,CAAaI,cAAb,GAA8B,OAA9B;AACAN,eAAOE,KAAP,CAAaK,OAAb,GAAuB,cAAvB;AACAP,eAAOQ,YAAP,CAAoB,OAApB,EAA6BZ,OAAOa,YAAP,CAAoB,OAApB,CAA7B;AACAd,qBAAaA,WAAWe,OAAX,CAAmBb,IAAnB,EAAyBG,OAAOZ,SAAhC,CAAb;AACD,OATD;;AAWAN,YAAMM,SAAN,GAAkBO,UAAlB;AACD,KAnBD;AAoBD,GA5BD,MA4BO;AACLf;AACD;AACF,CAxCD;;AA0CA,IAAG,cAAcH,MAAjB,EAAyB;AACvBP;AACD,CAFD,MAEO;AACL,MAAIyC,KAAKxC,SAAS8B,aAAT,CAAuB,MAAvB,CAAT;AACAU,KAAGC,GAAH,GAAS,YAAT;AACAD,KAAGE,IAAH,GAAU,UAAV;AACAF,KAAGG,IAAH,GAAU,qEAAV;AACA3C,WAAS4C,IAAT,CAAcC,WAAd,CAA0BL,EAA1B;;AAEA,MAAIM,IAAI9C,SAAS8B,aAAT,CAAuB,QAAvB,CAAR;AACAgB,IAAEZ,GAAF,GAAQ,gEAAR;AACAY,IAAEC,KAAF,GAAU,IAAV;AACAD,IAAEE,kBAAF,GAAuBF,EAAEG,MAAF,GAAW,YAAM;AACtC,QAAK,CAACH,EAAE7C,UAAH,IAAiB,kBAAkBiD,IAAlB,CAAuBJ,EAAE7C,UAAzB,CAAtB,EAA6D;AAC3DC;AACD;AACF,GAJD;AAKAF,WAASmD,aAAT,CAAuB,MAAvB,EAA+BN,WAA/B,CAA2CC,CAA3C;AACD","file":"Emoji.js","sourcesContent":["/*\r\n* Parses EmojiOne codes on page load.\r\n*\r\n* <element class=\"emoji\">:code</element> will be turned into a corresponding\r\n* Emoji in the style of EmojiOne (http://emojione.com/). Non-draggable on browsers\r\n* that will support it.\r\n*\r\n* Class names can be overridden using a global array. Ex:\r\n*     window.emojiClass = ['.emoji', '.icon'];\r\n*\r\n*/\r\n\r\nimport _ from 'lodash';\r\n\r\nconst bind = () => {\r\n  if(document.readyState === 'complete') {\r\n    goReplace();\r\n  } else {\r\n    document.addEventListener('DOMContentLoaded', goReplace);\r\n  }\r\n};\r\n\r\nconst goReplace = () => {\r\n  let emojis = document.querySelectorAll(window.emojiClass ? window.emojiClass.join(',') : '.emoji');\r\n  let fallback = () => {\r\n    _.forEach(emojis, (emoji) => {\r\n      let original = emoji.innerHTML;\r\n      let converted = emojione.toImage(original);\r\n      emoji.outerHTML = converted;\r\n    });\r\n  };\r\n  if('DOMParser' in window) {\r\n    let parser = new DOMParser();\r\n    try {\r\n      if ((new DOMParser()).parseFromString(\"\", \"text/html\")) {\r\n\r\n      }\r\n    } catch (ex) {fallback();}\r\n\r\n    _.forEach(emojis, (emoji) => {\r\n      let original = emoji.innerHTML;\r\n      let converted = emojione.toImage(original);\r\n      let htmlData = parser.parseFromString(converted, \"text/html\");\r\n      let images = htmlData.querySelectorAll('img.emojione');\r\n      let _emojified = emoji.outerHTML;\r\n\r\n      _.forEach(images, (_image) => {\r\n        let rexp = new RegExp(_image.title, 'g');\r\n        let object = document.createElement('i');\r\n        object.style.backgroundColor = 'rgba(0,0,0,0)';\r\n        object.style.backgroundImage = 'url(' + _image.src + ')';\r\n        object.style.backgroundSize = 'cover';\r\n        object.style.display = \"inline-block\";\r\n        object.setAttribute('class', _image.getAttribute('class'));\r\n        _emojified = _emojified.replace(rexp, object.outerHTML);\r\n      });\r\n\r\n      emoji.outerHTML = _emojified;\r\n    });\r\n  } else {\r\n    fallback();\r\n  }\r\n};\r\n\r\nif('emojione' in window) {\r\n  bind();\r\n} else {\r\n  let el = document.createElement('link');\r\n  el.rel = \"stylesheet\";\r\n  el.type = \"text/css\";\r\n  el.href = 'https://cdn.jsdelivr.net/emojione/2.2.7/assets/css/emojione.min.css';\r\n  document.head.appendChild(el);\r\n\r\n  let s = document.createElement('script');\r\n  s.src = 'https://cdn.jsdelivr.net/emojione/2.2.7/lib/js/emojione.min.js';\r\n  s.async = true;\r\n  s.onreadystatechange = s.onload = () => {\r\n    if ((!s.readyState || /loaded|complete/.test(s.readyState))) {\r\n      goReplace();\r\n    }\r\n  };\r\n  document.querySelector('head').appendChild(s);\r\n}\r\n"]}